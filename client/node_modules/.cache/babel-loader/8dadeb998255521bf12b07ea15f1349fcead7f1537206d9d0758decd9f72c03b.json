{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\component\\\\maps.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst Maps = ({\n  lat,\n  lon,\n  id\n}) => {\n  _s();\n  const mapContainerRef = useRef(null); // useRef를 사용하여 DOM 요소를 참조\n  const [address, setAddress] = useState(\"\"); // 주소 상태를 추가\n  const [location, setLocation] = useState(null); // 위치 상태를 추가\n\n  //REST API를 이용해 좌표를 주소로 변환\n  useEffect(() => {\n    fetchAddress();\n  }, [lat, lon]);\n\n  //var address = encodeURIComponent(add_res.address_name);  //주소를 형식에 맞게 인코딩\n\n  //REST API를 이용해 주소 위치의 정보를 가져옴\n  const loc_res = axios({\n    method: \"GET\",\n    url: `https://dapi.kakao.com/v2/local/search/address.json?analyze_type=similar&query=${address}`,\n    headers: {\n      Authorization: `KakaoAK 59be56c1b793f6c69842484efa84e201`\n    }\n  });\n  useEffect(() => {\n    maps();\n  }, [lat, lon]); // lat과 lon이 변경될 때마다 effect 실행\n\n  const fetchAddress = async () => {\n    try {\n      const add_res = await axios({\n        method: \"GET\",\n        url: `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${lon}&y=${lat}&input_coord=WGS84`,\n        headers: {\n          Authorization: `KakaoAK 59be56c1b793f6c69842484efa84e201`\n        }\n      });\n      if (add_res.data.documents.length > 0) {\n        setAddress(add_res.data.documents[0].address.address_name);\n      }\n    } catch (error) {\n      console.error(\"주소 변환 오류:\", error);\n    }\n  };\n  const maps = () => {\n    if (mapContainerRef.current) {\n      // mapContainerRef.current가 유효할 때만 실행\n      const container = mapContainerRef.current;\n      const options = {\n        center: new kakao.maps.LatLng(lat, lon),\n        level: 3\n      };\n      var map = new kakao.maps.Map(container, options); // 카카오 지도 초기화\n\n      var markerPosition = new kakao.maps.LatLng(lat, lon);\n\n      // 마커를 생성합니다\n      var marker = new kakao.maps.Marker({\n        position: markerPosition,\n        clickable: true\n      });\n\n      // 마커가 지도 위에 표시되도록 설정합니다\n      marker.setMap(map);\n\n      // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\n      var iwContent = '<div style=\"padding:5px;\">Hello World!</div>'; // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\n\n      // 인포윈도우를 생성합니다\n      var infowindow = new kakao.maps.InfoWindow({\n        content: iwContent,\n        removable: true\n      });\n\n      // 마커에 클릭이벤트를 등록합니다\n      kakao.maps.event.addListener(marker, 'click', function () {\n        // 마커 위에 인포윈도우를 표시합니다\n        infowindow.open(map, marker);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    ref: mapContainerRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 12\n  }, this); // ref를 div에 설정\n};\n_s(Maps, \"cyeavEfBR5nKtyrkJZM9NneGDmE=\");\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useEffect","useRef","axios","jsxDEV","_jsxDEV","kakao","window","Maps","lat","lon","id","_s","mapContainerRef","address","setAddress","useState","location","setLocation","fetchAddress","loc_res","method","url","headers","Authorization","maps","add_res","data","documents","length","address_name","error","console","current","container","options","center","LatLng","level","map","Map","markerPosition","marker","Marker","position","clickable","setMap","iwContent","infowindow","InfoWindow","content","removable","event","addListener","open","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/maps.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst Maps = ({ lat, lon, id }) => {\r\n    const mapContainerRef = useRef(null);  // useRef를 사용하여 DOM 요소를 참조\r\n    const [address, setAddress] = useState(\"\");  // 주소 상태를 추가\r\n    const [location, setLocation] = useState(null);  // 위치 상태를 추가\r\n    \r\n    //REST API를 이용해 좌표를 주소로 변환\r\n    useEffect(() => {\r\n        fetchAddress();\r\n    }, [lat, lon]);\r\n    \r\n    //var address = encodeURIComponent(add_res.address_name);  //주소를 형식에 맞게 인코딩\r\n\r\n    //REST API를 이용해 주소 위치의 정보를 가져옴\r\n    const loc_res = axios({\r\n        method: \"GET\",\r\n        url: `https://dapi.kakao.com/v2/local/search/address.json?analyze_type=similar&query=${address}`,\r\n        headers: {\r\n            Authorization: `KakaoAK 59be56c1b793f6c69842484efa84e201`,\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        maps();\r\n    }, [lat, lon]);  // lat과 lon이 변경될 때마다 effect 실행\r\n\r\n    const fetchAddress = async () => {\r\n        try {\r\n            const add_res = await axios({\r\n                method: \"GET\",\r\n                url: `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${lon}&y=${lat}&input_coord=WGS84`,\r\n                headers: {\r\n                    Authorization: `KakaoAK 59be56c1b793f6c69842484efa84e201`,\r\n                },\r\n            });\r\n            if (add_res.data.documents.length > 0) {\r\n                setAddress(add_res.data.documents[0].address.address_name);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"주소 변환 오류:\", error);\r\n        }\r\n    };\r\n\r\n    const maps = () => {\r\n        if (mapContainerRef.current) {  // mapContainerRef.current가 유효할 때만 실행\r\n            const container = mapContainerRef.current;\r\n            const options = {\r\n                center: new kakao.maps.LatLng(lat, lon),\r\n                level: 3\r\n            };\r\n            var map = new kakao.maps.Map(container, options);  // 카카오 지도 초기화\r\n\r\n            var markerPosition = new kakao.maps.LatLng(lat, lon);\r\n\r\n            // 마커를 생성합니다\r\n            var marker = new kakao.maps.Marker({\r\n                position: markerPosition,\r\n                clickable: true\r\n            });\r\n\r\n            // 마커가 지도 위에 표시되도록 설정합니다\r\n            marker.setMap(map);\r\n\r\n            // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\r\n            var iwContent = '<div style=\"padding:5px;\">Hello World!</div>'; // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n\r\n            // 인포윈도우를 생성합니다\r\n            var infowindow = new kakao.maps.InfoWindow({\r\n                content: iwContent,\r\n                removable: true\r\n            });\r\n\r\n            // 마커에 클릭이벤트를 등록합니다\r\n            kakao.maps.event.addListener(marker, 'click', function () {\r\n                // 마커 위에 인포윈도우를 표시합니다\r\n                infowindow.open(map, marker);\r\n            });\r\n        }\r\n    }\r\n\r\n    return <div id={id} ref={mapContainerRef} style={{ width: '100%', height: '100%' }}></div>;  // ref를 div에 설정\r\n};\r\n\r\nexport default Maps;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}