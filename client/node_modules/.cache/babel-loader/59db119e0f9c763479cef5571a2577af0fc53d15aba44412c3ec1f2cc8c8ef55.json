{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\component\\\\list_map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchLists } from \"../redux/actions/listActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst ListMap = () => {\n  _s();\n  const mapContainerRef = useRef(null); // useRef를 사용하여 DOM 요소를 참조\n  const [location, setLocation] = useState(null); // 위치 상태를 추가\n  const [lat, setLat] = useState(0);\n  const [lon, setLon] = useState(0);\n  const [lists, setLists] = useState([]);\n  const api_key = process.env.REACT_APP_API_KEY; //api_key .env파일 활용\n\n  const dispatch = useDispatch();\n  const temp = useSelector(state => state.lists.lists);\n  setLists(temp);\n  console.log(lists);\n  useEffect(() => {\n    dispatch(fetchLists());\n  }, [dispatch]);\n  const fetchLocation = async list => {\n    if (list) {\n      try {\n        const encodedAddress = encodeURIComponent(list);\n        const loc_res = await axios({\n          method: \"GET\",\n          url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\n          headers: {\n            Authorization: `KakaoAK ${api_key}`\n          }\n        });\n        if (loc_res.data.documents.length > 0) {\n          const document = loc_res.data.documents[0];\n          setLat(document.y);\n          setLon(document.x);\n          setLocation(document);\n        }\n      } catch (error) {\n        console.error(\"위치 검색 오류:\", error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (location) {\n      maps();\n    }\n  }, [location]); // lat과 lon이 변경될 때마다 effect 실행\n\n  const maps = () => {\n    if (mapContainerRef.current) {\n      // mapContainerRef.current가 유효할 때만 실행\n      const container = mapContainerRef.current;\n      const options = {\n        center: new kakao.maps.LatLng(lat, lon),\n        level: 3\n      };\n      var map = new kakao.maps.Map(container, options); // 카카오 지도 초기화\n\n      lists.map((list, idx) => {\n        fetchLocation(list.list_address);\n        console.log(\"++\" + list.list_address);\n        var markerPosition = new kakao.maps.LatLng(lat, lon);\n\n        // 마커를 생성합니다\n        var marker = new kakao.maps.Marker({\n          position: markerPosition,\n          clickable: true\n        });\n\n        // 마커가 지도 위에 표시되도록 설정합니다\n        marker.setMap(map);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainerRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 12\n  }, this); // ref를 div에 설정\n};\n_s(ListMap, \"CEoQSWpax6Tv5WPFnkSh0lBdogw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ListMap;\nexport default ListMap;\nvar _c;\n$RefreshReg$(_c, \"ListMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","useDispatch","useSelector","fetchLists","jsxDEV","_jsxDEV","kakao","window","ListMap","_s","mapContainerRef","location","setLocation","lat","setLat","lon","setLon","lists","setLists","api_key","process","env","REACT_APP_API_KEY","dispatch","temp","state","console","log","fetchLocation","list","encodedAddress","encodeURIComponent","loc_res","method","url","headers","Authorization","data","documents","length","document","y","x","error","maps","current","container","options","center","LatLng","level","map","Map","idx","list_address","markerPosition","marker","Marker","position","clickable","setMap","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/list_map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchLists } from \"../redux/actions/listActions\";\r\n\r\n\r\nconst { kakao } = window;\r\n\r\nconst ListMap = () => {\r\n    const mapContainerRef = useRef(null);  // useRef를 사용하여 DOM 요소를 참조\r\n    const [location, setLocation] = useState(null);  // 위치 상태를 추가\r\n    const [lat, setLat] = useState(0);\r\n    const [lon, setLon] = useState(0);\r\n    const [lists, setLists] = useState([]);\r\n    const api_key = process.env.REACT_APP_API_KEY;  //api_key .env파일 활용\r\n\r\n    const dispatch = useDispatch();\r\n    const temp = useSelector((state) => state.lists.lists);\r\n    setLists(temp)\r\n    console.log(lists);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchLists());\r\n    }, [dispatch]);\r\n\r\n\r\n    const fetchLocation = async (list) => {\r\n        if (list) {\r\n            try {\r\n                const encodedAddress = encodeURIComponent(list);\r\n                const loc_res = await axios({\r\n                    method: \"GET\",\r\n                    url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\r\n                    headers: {\r\n                        Authorization: `KakaoAK ${api_key}`,\r\n                    },\r\n                });\r\n\r\n                if (loc_res.data.documents.length > 0) {\r\n                    const document = loc_res.data.documents[0];\r\n                    setLat(document.y);\r\n                    setLon(document.x);\r\n                    setLocation(document);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"위치 검색 오류:\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (location) {\r\n            maps();\r\n        }\r\n    }, [location]);  // lat과 lon이 변경될 때마다 effect 실행\r\n\r\n    const maps = () => {\r\n        if (mapContainerRef.current) {  // mapContainerRef.current가 유효할 때만 실행\r\n            const container = mapContainerRef.current;\r\n            const options = {\r\n                center: new kakao.maps.LatLng(lat, lon),\r\n                level: 3\r\n            };\r\n            var map = new kakao.maps.Map(container, options);  // 카카오 지도 초기화\r\n\r\n            lists.map((list, idx) => {\r\n                fetchLocation(list.list_address);\r\n                console.log(\"++\"+list.list_address);\r\n                var markerPosition = new kakao.maps.LatLng(lat, lon);\r\n\r\n                // 마커를 생성합니다\r\n                var marker = new kakao.maps.Marker({\r\n                    position: markerPosition,\r\n                    clickable: true\r\n                });\r\n\r\n                // 마커가 지도 위에 표시되도록 설정합니다\r\n                marker.setMap(map);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    return <div ref={mapContainerRef} style={{ width: '100%', height: '100%' }}></div>;  // ref를 div에 설정\r\n};\r\n\r\nexport default ListMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1D,MAAM;EAAEC;AAAM,CAAC,GAAGC,MAAM;AAExB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,eAAe,GAAGZ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAE;EACvC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACjD,MAAM,CAACc,GAAG,EAAEC,MAAM,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACgB,GAAG,EAAEC,MAAM,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMoB,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC,CAAE;;EAEhD,MAAMC,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAC9B,MAAMuB,IAAI,GAAGtB,WAAW,CAAEuB,KAAK,IAAKA,KAAK,CAACR,KAAK,CAACA,KAAK,CAAC;EACtDC,QAAQ,CAACM,IAAI,CAAC;EACdE,OAAO,CAACC,GAAG,CAACV,KAAK,CAAC;EAElBpB,SAAS,CAAC,MAAM;IACZ0B,QAAQ,CAACpB,UAAU,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACoB,QAAQ,CAAC,CAAC;EAGd,MAAMK,aAAa,GAAG,MAAOC,IAAI,IAAK;IAClC,IAAIA,IAAI,EAAE;MACN,IAAI;QACA,MAAMC,cAAc,GAAGC,kBAAkB,CAACF,IAAI,CAAC;QAC/C,MAAMG,OAAO,GAAG,MAAMhC,KAAK,CAAC;UACxBiC,MAAM,EAAE,KAAK;UACbC,GAAG,EAAE,6DAA6DJ,cAAc,EAAE;UAClFK,OAAO,EAAE;YACLC,aAAa,EAAE,WAAWjB,OAAO;UACrC;QACJ,CAAC,CAAC;QAEF,IAAIa,OAAO,CAACK,IAAI,CAACC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;UACnC,MAAMC,QAAQ,GAAGR,OAAO,CAACK,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;UAC1CxB,MAAM,CAAC0B,QAAQ,CAACC,CAAC,CAAC;UAClBzB,MAAM,CAACwB,QAAQ,CAACE,CAAC,CAAC;UAClB9B,WAAW,CAAC4B,QAAQ,CAAC;QACzB;MACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZjB,OAAO,CAACiB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACrC;IACJ;EACJ,CAAC;EAED9C,SAAS,CAAC,MAAM;IACZ,IAAIc,QAAQ,EAAE;MACViC,IAAI,CAAC,CAAC;IACV;EACJ,CAAC,EAAE,CAACjC,QAAQ,CAAC,CAAC,CAAC,CAAE;;EAEjB,MAAMiC,IAAI,GAAGA,CAAA,KAAM;IACf,IAAIlC,eAAe,CAACmC,OAAO,EAAE;MAAG;MAC5B,MAAMC,SAAS,GAAGpC,eAAe,CAACmC,OAAO;MACzC,MAAME,OAAO,GAAG;QACZC,MAAM,EAAE,IAAI1C,KAAK,CAACsC,IAAI,CAACK,MAAM,CAACpC,GAAG,EAAEE,GAAG,CAAC;QACvCmC,KAAK,EAAE;MACX,CAAC;MACD,IAAIC,GAAG,GAAG,IAAI7C,KAAK,CAACsC,IAAI,CAACQ,GAAG,CAACN,SAAS,EAAEC,OAAO,CAAC,CAAC,CAAE;;MAEnD9B,KAAK,CAACkC,GAAG,CAAC,CAACtB,IAAI,EAAEwB,GAAG,KAAK;QACrBzB,aAAa,CAACC,IAAI,CAACyB,YAAY,CAAC;QAChC5B,OAAO,CAACC,GAAG,CAAC,IAAI,GAACE,IAAI,CAACyB,YAAY,CAAC;QACnC,IAAIC,cAAc,GAAG,IAAIjD,KAAK,CAACsC,IAAI,CAACK,MAAM,CAACpC,GAAG,EAAEE,GAAG,CAAC;;QAEpD;QACA,IAAIyC,MAAM,GAAG,IAAIlD,KAAK,CAACsC,IAAI,CAACa,MAAM,CAAC;UAC/BC,QAAQ,EAAEH,cAAc;UACxBI,SAAS,EAAE;QACf,CAAC,CAAC;;QAEF;QACAH,MAAM,CAACI,MAAM,CAACT,GAAG,CAAC;MACtB,CAAC,CAAC;IAEN;EACJ,CAAC;EAED,oBAAO9C,OAAA;IAAKwD,GAAG,EAAEnD,eAAgB;IAACoD,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC,CAAC,CAAE;AACzF,CAAC;AAAC3D,EAAA,CA5EID,OAAO;EAAA,QAQQP,WAAW,EACfC,WAAW;AAAA;AAAAmE,EAAA,GATtB7D,OAAO;AA8Eb,eAAeA,OAAO;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}