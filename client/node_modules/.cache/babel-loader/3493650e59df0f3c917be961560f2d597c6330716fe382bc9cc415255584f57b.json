{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport fetchLocations from \"./fetchLoc\";\nimport \"../css/list_map.css\";\nconst {\n  kakao\n} = window;\nconst useFetchMaps = ({\n  content\n}) => {\n  _s();\n  const [locations, setLocations] = useState([]); // 위치 상태를 추가\n  const [mapDetails, setMapDetails] = useState({\n    option: {},\n    markers: []\n  });\n  useEffect(() => {\n    const fetchLoc = async () => {\n      if (content) {\n        const locs = await fetchLocations([content]);\n        if (locs) {\n          setLocations(locs);\n        }\n      }\n    };\n    fetchLoc();\n  }, [content]);\n  const maps = () => {\n    if (locations) {\n      const options = {\n        center: locations[0].latlng,\n        level: 4\n      };\n      const markers = locations.map(loc => {\n        return new kakao.maps.Marker({\n          position: loc.latlng,\n          clickable: true\n        });\n      });\n      const Ins = {\n        option: options,\n        markers: markers\n      };\n      setMap(Ins);\n\n      /*kakao.maps.event.addListener(map, 'tilesloaded', function() {\r\n          // 현재 지도의 중심 좌표 가져오기\r\n          var center = map.getCenter();\r\n      \r\n          // 새로운 중심 좌표를 계산 (오른쪽으로 20% 이동)\r\n          var moveLatLon = new kakao.maps.LatLng(center.getLat(), center.getLng() - (map.getBounds().getSouthWest().getLng() - center.getLng()) * 0.3);\r\n      \r\n          // 애니메이션 없이 바로 중심을 설정\r\n          if(post){\r\n              map.setCenter(moveLatLon);\r\n              map.setZoomable(false);\r\n              map.setDraggable(false);\r\n          }\r\n      });*/\n    }\n  };\n  return map;\n};\n_s(useFetchMaps, \"MOcf7m3qWopOkRD8eGl1ceT2+88=\");\nexport default useFetchMaps;","map":{"version":3,"names":["useEffect","useState","fetchLocations","kakao","window","useFetchMaps","content","_s","locations","setLocations","mapDetails","setMapDetails","option","markers","fetchLoc","locs","maps","options","center","latlng","level","map","loc","Marker","position","clickable","Ins","setMap"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/fetchMaps.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport fetchLocations from \"./fetchLoc\";\r\nimport \"../css/list_map.css\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst useFetchMaps = ({ content }) => {\r\n    const [locations, setLocations] = useState([]);  // 위치 상태를 추가\r\n    const [mapDetails, setMapDetails] = useState({ option: {}, markers: [] });\r\n\r\n    useEffect(() => {\r\n        const fetchLoc = async () => {\r\n            if (content) {\r\n                const locs = await fetchLocations([content]);\r\n                if (locs) {\r\n                    setLocations(locs);\r\n                }\r\n            }\r\n        };\r\n        fetchLoc();\r\n    }, [content]);\r\n\r\n    const maps = () => {\r\n        if (locations) {\r\n            const options = {\r\n                center: locations[0].latlng,\r\n                level: 4\r\n            };\r\n            \r\n            const markers = locations.map(loc => {\r\n                return new kakao.maps.Marker({\r\n                    position: loc.latlng,\r\n                    clickable: true\r\n                });\r\n            });\r\n\r\n            const Ins = {\r\n                option: options,\r\n                markers: markers\r\n            };\r\n\r\n            setMap(Ins);\r\n\r\n            /*kakao.maps.event.addListener(map, 'tilesloaded', function() {\r\n                // 현재 지도의 중심 좌표 가져오기\r\n                var center = map.getCenter();\r\n            \r\n                // 새로운 중심 좌표를 계산 (오른쪽으로 20% 이동)\r\n                var moveLatLon = new kakao.maps.LatLng(center.getLat(), center.getLng() - (map.getBounds().getSouthWest().getLng() - center.getLng()) * 0.3);\r\n            \r\n                // 애니메이션 없이 바로 중심을 설정\r\n                if(post){\r\n                    map.setCenter(moveLatLon);\r\n                    map.setZoomable(false);\r\n                    map.setDraggable(false);\r\n                }\r\n            });*/\r\n        }\r\n    }\r\n\r\n    return map;\r\n};\r\n\r\nexport default useFetchMaps;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,cAAc,MAAM,YAAY;AACvC,OAAO,qBAAqB;AAE5B,MAAM;EAAEC;AAAM,CAAC,GAAGC,MAAM;AAExB,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACjD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC;IAAEW,MAAM,EAAE,CAAC,CAAC;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAEzEb,SAAS,CAAC,MAAM;IACZ,MAAMc,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAIR,OAAO,EAAE;QACT,MAAMS,IAAI,GAAG,MAAMb,cAAc,CAAC,CAACI,OAAO,CAAC,CAAC;QAC5C,IAAIS,IAAI,EAAE;UACNN,YAAY,CAACM,IAAI,CAAC;QACtB;MACJ;IACJ,CAAC;IACDD,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,CAACR,OAAO,CAAC,CAAC;EAEb,MAAMU,IAAI,GAAGA,CAAA,KAAM;IACf,IAAIR,SAAS,EAAE;MACX,MAAMS,OAAO,GAAG;QACZC,MAAM,EAAEV,SAAS,CAAC,CAAC,CAAC,CAACW,MAAM;QAC3BC,KAAK,EAAE;MACX,CAAC;MAED,MAAMP,OAAO,GAAGL,SAAS,CAACa,GAAG,CAACC,GAAG,IAAI;QACjC,OAAO,IAAInB,KAAK,CAACa,IAAI,CAACO,MAAM,CAAC;UACzBC,QAAQ,EAAEF,GAAG,CAACH,MAAM;UACpBM,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,MAAMC,GAAG,GAAG;QACRd,MAAM,EAAEK,OAAO;QACfJ,OAAO,EAAEA;MACb,CAAC;MAEDc,MAAM,CAACD,GAAG,CAAC;;MAEX;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ;EACJ,CAAC;EAED,OAAOL,GAAG;AACd,CAAC;AAACd,EAAA,CAvDIF,YAAY;AAyDlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}