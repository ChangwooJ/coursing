{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport fetchLocations from \"./fetchLoc\";\nimport \"../css/list_map.css\";\nconst {\n  kakao\n} = window;\nconst Maps = ({\n  content\n}) => {\n  _s();\n  const [locations, setLocations] = useState(null); // 위치 상태를 추가\n  const [map, setMap] = useState({});\n  useEffect(() => {\n    const fetchLoc = async () => {\n      if (content) {\n        const locs = await fetchLocations([content]);\n        if (locs) {\n          setLocations(locs);\n        }\n      }\n    };\n    fetchLoc();\n  }, [content]);\n  useEffect(() => {\n    if (locations) {\n      maps();\n    }\n  }, [locations]); // lat과 lon이 변경될 때마다 effect 실행\n\n  const maps = () => {\n    if (locations) {\n      //const container = mapContainerRef.current;\n      const options = {\n        center: locations[0].latlng,\n        level: 4\n      };\n      // var map = new kakao.maps.Map(container, options);\n      const markers = locations.map(loc => {\n        return new kakao.maps.Marker({\n          position: loc.latlng,\n          clickable: true\n        });\n      });\n      const Ins = {\n        option: options\n      };\n\n      /*\r\n      locations.forEach((loc) => {\r\n          var marker = new kakao.maps.Marker({\r\n              position: loc.latlng,\r\n              clickable: true\r\n          });\r\n          // 마커가 지도 위에 표시되도록 설정합니다\r\n          marker.setMap(map);\r\n      });\r\n      \r\n      setMapIns(map);\r\n      */\n\n      /*kakao.maps.event.addListener(map, 'tilesloaded', function() {\r\n          // 현재 지도의 중심 좌표 가져오기\r\n          var center = map.getCenter();\r\n      \r\n          // 새로운 중심 좌표를 계산 (오른쪽으로 20% 이동)\r\n          var moveLatLon = new kakao.maps.LatLng(center.getLat(), center.getLng() - (map.getBounds().getSouthWest().getLng() - center.getLng()) * 0.3);\r\n      \r\n          // 애니메이션 없이 바로 중심을 설정\r\n          if(post){\r\n              map.setCenter(moveLatLon);\r\n              map.setZoomable(false);\r\n              map.setDraggable(false);\r\n          }\r\n      });*/\n    }\n  };\n  return map;\n};\n_s(Maps, \"2YAwhGR2UkeYsMhm6FMBGVX7fmA=\");\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useEffect","useRef","useState","fetchLocations","kakao","window","Maps","content","_s","locations","setLocations","map","setMap","fetchLoc","locs","maps","options","center","latlng","level","markers","loc","Marker","position","clickable","Ins","option","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/maps.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport fetchLocations from \"./fetchLoc\";\r\nimport \"../css/list_map.css\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst Maps = ({ content }) => {\r\n    const [locations, setLocations] = useState(null);  // 위치 상태를 추가\r\n    const [map, setMap] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchLoc = async () => {\r\n            if (content) {\r\n                const locs = await fetchLocations([content]);\r\n                if (locs) {\r\n                    setLocations(locs);\r\n                }\r\n            }\r\n        };\r\n        fetchLoc();\r\n    }, [content]);\r\n\r\n    useEffect(() => {\r\n        if (locations) {\r\n            maps();\r\n        }\r\n    }, [locations]);  // lat과 lon이 변경될 때마다 effect 실행\r\n\r\n    const maps = () => {\r\n        if (locations) {\r\n            //const container = mapContainerRef.current;\r\n            const options = {\r\n                center: locations[0].latlng,\r\n                level: 4\r\n            };\r\n           // var map = new kakao.maps.Map(container, options);\r\n            const markers = locations.map(loc => {\r\n                return new kakao.maps.Marker({\r\n                    position: loc.latlng,\r\n                    clickable: true\r\n                });\r\n            });\r\n\r\n            const Ins = {\r\n                option: options,\r\n                \r\n            }\r\n\r\n            /*\r\n            locations.forEach((loc) => {\r\n                var marker = new kakao.maps.Marker({\r\n                    position: loc.latlng,\r\n                    clickable: true\r\n                });\r\n                // 마커가 지도 위에 표시되도록 설정합니다\r\n                marker.setMap(map);\r\n            });\r\n            \r\n            setMapIns(map);\r\n            */\r\n\r\n            /*kakao.maps.event.addListener(map, 'tilesloaded', function() {\r\n                // 현재 지도의 중심 좌표 가져오기\r\n                var center = map.getCenter();\r\n            \r\n                // 새로운 중심 좌표를 계산 (오른쪽으로 20% 이동)\r\n                var moveLatLon = new kakao.maps.LatLng(center.getLat(), center.getLng() - (map.getBounds().getSouthWest().getLng() - center.getLng()) * 0.3);\r\n            \r\n                // 애니메이션 없이 바로 중심을 설정\r\n                if(post){\r\n                    map.setCenter(moveLatLon);\r\n                    map.setZoomable(false);\r\n                    map.setDraggable(false);\r\n                }\r\n            });*/\r\n        }\r\n    }\r\n\r\n    return map;\r\n};\r\n\r\nexport default Maps;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,cAAc,MAAM,YAAY;AACvC,OAAO,qBAAqB;AAE5B,MAAM;EAAEC;AAAM,CAAC,GAAGC,MAAM;AAExB,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACnD,MAAM,CAACS,GAAG,EAAEC,MAAM,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElCF,SAAS,CAAC,MAAM;IACZ,MAAMa,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAIN,OAAO,EAAE;QACT,MAAMO,IAAI,GAAG,MAAMX,cAAc,CAAC,CAACI,OAAO,CAAC,CAAC;QAC5C,IAAIO,IAAI,EAAE;UACNJ,YAAY,CAACI,IAAI,CAAC;QACtB;MACJ;IACJ,CAAC;IACDD,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC;EAEbP,SAAS,CAAC,MAAM;IACZ,IAAIS,SAAS,EAAE;MACXM,IAAI,CAAC,CAAC;IACV;EACJ,CAAC,EAAE,CAACN,SAAS,CAAC,CAAC,CAAC,CAAE;;EAElB,MAAMM,IAAI,GAAGA,CAAA,KAAM;IACf,IAAIN,SAAS,EAAE;MACX;MACA,MAAMO,OAAO,GAAG;QACZC,MAAM,EAAER,SAAS,CAAC,CAAC,CAAC,CAACS,MAAM;QAC3BC,KAAK,EAAE;MACX,CAAC;MACF;MACC,MAAMC,OAAO,GAAGX,SAAS,CAACE,GAAG,CAACU,GAAG,IAAI;QACjC,OAAO,IAAIjB,KAAK,CAACW,IAAI,CAACO,MAAM,CAAC;UACzBC,QAAQ,EAAEF,GAAG,CAACH,MAAM;UACpBM,SAAS,EAAE;QACf,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,MAAMC,GAAG,GAAG;QACRC,MAAM,EAAEV;MAEZ,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ;EACJ,CAAC;EAED,OAAOL,GAAG;AACd,CAAC;AAACH,EAAA,CAzEIF,IAAI;AAAAqB,EAAA,GAAJrB,IAAI;AA2EV,eAAeA,IAAI;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}