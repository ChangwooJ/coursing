{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\pages\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPosts } from \"../redux/actions/postActions\";\nimport PostList from \"../component/postList\";\nimport '../css/Main.css';\nimport \"../css/mylist.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  //post리스트 받아서 map으로 반복. postlist컴포넌트에 post마다의 content전달 혹은 post_id만 전달.\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts.posts);\n  const [loading, setLoading] = useState(true);\n  console.log(posts);\n  useEffect(() => {\n    const fetchPostList = () => {\n      dispatch(fetchPosts());\n      setLoading(false);\n    };\n    fetchPostList();\n  }, [dispatch]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), posts.map(post => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main_wrap\",\n        children: /*#__PURE__*/_jsxDEV(PostList, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this)\n      }, post.post_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"Hcrph+jQGIIz8+7vWW1zlk6pUXk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchPosts","PostList","jsxDEV","_jsxDEV","Main","_s","dispatch","posts","state","loading","setLoading","console","log","fetchPostList","children","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","map","post","className","post_id","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/pages/Main.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchPosts } from \"../redux/actions/postActions\";\r\nimport PostList from \"../component/postList\";\r\nimport '../css/Main.css';\r\nimport \"../css/mylist.css\";\r\n\r\nconst Main = () => {\r\n    //post리스트 받아서 map으로 반복. postlist컴포넌트에 post마다의 content전달 혹은 post_id만 전달.\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector(state => state.posts.posts);\r\n    const [loading, setLoading] = useState(true);\r\n    console.log(posts);\r\n\r\n    useEffect(() => {\r\n        const fetchPostList = () => {\r\n            dispatch(fetchPosts());\r\n            setLoading(false);\r\n        }\r\n        fetchPostList();\r\n    }, [dispatch]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                \r\n            </div>\r\n            {posts.map(post => {\r\n                return (\r\n                    <div key={post.post_id} className=\"main_wrap\">\r\n                        <PostList post={post} />\r\n                    </div>\r\n                )\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,8BAA8B;AACzD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAO,iBAAiB;AACxB,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf;EACA,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,KAAK,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;EACrD,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5Cc,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EAElBX,SAAS,CAAC,MAAM;IACZ,MAAMiB,aAAa,GAAGA,CAAA,KAAM;MACxBP,QAAQ,CAACN,UAAU,CAAC,CAAC,CAAC;MACtBU,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC;IACDG,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,IAAIG,OAAO,EAAE;IACT,oBAAON,OAAA;MAAAW,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,oBACIf,OAAA,CAACR,KAAK,CAACwB,QAAQ;IAAAL,QAAA,gBACXX,OAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEK,CAAC,EACLX,KAAK,CAACa,GAAG,CAACC,IAAI,IAAI;MACf,oBACIlB,OAAA;QAAwBmB,SAAS,EAAC,WAAW;QAAAR,QAAA,eACzCX,OAAA,CAACF,QAAQ;UAACoB,IAAI,EAAEA;QAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADlBG,IAAI,CAACE,OAAO;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjB,CAAC;IAEd,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEzB,CAAC;AAAAb,EAAA,CAjCKD,IAAI;EAAA,QAEWN,WAAW,EACdC,WAAW;AAAA;AAAAyB,EAAA,GAHvBpB,IAAI;AAmCV,eAAeA,IAAI;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}