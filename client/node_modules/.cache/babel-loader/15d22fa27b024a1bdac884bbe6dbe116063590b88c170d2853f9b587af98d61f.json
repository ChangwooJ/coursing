{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\component\\\\maps.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst Maps = ({\n  id,\n  address\n}) => {\n  _s();\n  const mapContainerRef = useRef(null); // useRef를 사용하여 DOM 요소를 참조\n  const [location, setLocation] = useState(null); // 위치 상태를 추가\n  const [lat, setLat] = useState(0);\n  const [lon, setLon] = useState(0);\n  const fetchLocation = async () => {\n    if (address) {\n      try {\n        const encodedAddress = encodeURIComponent(address);\n        const loc_res = await axios({\n          method: \"GET\",\n          url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\n          headers: {\n            Authorization: `KakaoAK ${process.env.REACT_APP_API_KEY}`\n          }\n        });\n        if (loc_res.data.documents.length > 0) {\n          const document = loc_res.data.documents[0];\n          setLat(document.y);\n          setLon(document.x);\n          setLocation(document);\n          console.log();\n        }\n      } catch (error) {\n        console.error(\"위치 검색 오류:\", error);\n      }\n    }\n  };\n\n  //REST API를 이용해 주소 위치의 정보를 가져옴\n  useEffect(() => {\n    fetchLocation();\n  }, [address]);\n  useEffect(() => {\n    if (location) {\n      maps();\n    }\n  }, [location]); // lat과 lon이 변경될 때마다 effect 실행\n\n  const maps = () => {\n    if (mapContainerRef.current) {\n      // mapContainerRef.current가 유효할 때만 실행\n      const container = mapContainerRef.current;\n      const options = {\n        center: new kakao.maps.LatLng(lat, lon),\n        level: 3\n      };\n      var map = new kakao.maps.Map(container, options); // 카카오 지도 초기화\n\n      var markerPosition = new kakao.maps.LatLng(lat, lon);\n\n      // 마커를 생성합니다\n      var marker = new kakao.maps.Marker({\n        position: markerPosition,\n        clickable: true\n      });\n\n      // 마커가 지도 위에 표시되도록 설정합니다\n      marker.setMap(map);\n\n      // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\n      var iwContent = `<div>${location.road_address.building_name}</div>`,\n        // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\n        iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\n\n      // 인포윈도우를 생성합니다\n      var infowindow = new kakao.maps.InfoWindow({\n        content: iwContent,\n        removable: iwRemoveable\n      });\n\n      // 마커 위에 인포윈도우를 표시합니다\n      infowindow.open(map, marker);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    ref: mapContainerRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 12\n  }, this); // ref를 div에 설정\n};\n_s(Maps, \"WH5DzWtExMlDH4lelOz3ZjOM/Oo=\");\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","jsxDEV","_jsxDEV","kakao","window","Maps","id","address","_s","mapContainerRef","location","setLocation","lat","setLat","lon","setLon","fetchLocation","encodedAddress","encodeURIComponent","loc_res","method","url","headers","Authorization","process","env","REACT_APP_API_KEY","data","documents","length","document","y","x","console","log","error","maps","current","container","options","center","LatLng","level","map","Map","markerPosition","marker","Marker","position","clickable","setMap","iwContent","road_address","building_name","iwRemoveable","infowindow","InfoWindow","content","removable","open","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/maps.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst Maps = ({ id, address }) => {\r\n    const mapContainerRef = useRef(null);  // useRef를 사용하여 DOM 요소를 참조\r\n    const [location, setLocation] = useState(null);  // 위치 상태를 추가\r\n    const [lat, setLat] = useState(0);\r\n    const [lon, setLon] = useState(0);\r\n\r\n    const fetchLocation = async () => {\r\n        if (address) {\r\n            try {\r\n                const encodedAddress = encodeURIComponent(address);\r\n                const loc_res = await axios({\r\n                    method: \"GET\",\r\n                    url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\r\n                    headers: {\r\n                        Authorization: `KakaoAK ${process.env.REACT_APP_API_KEY}`,\r\n                    },\r\n                });\r\n                if (loc_res.data.documents.length > 0) {\r\n                    const document = loc_res.data.documents[0];\r\n                    setLat(document.y);\r\n                    setLon(document.x);\r\n                    setLocation(document);\r\n                    console.log()\r\n                }\r\n            } catch (error) {\r\n                console.error(\"위치 검색 오류:\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    //REST API를 이용해 주소 위치의 정보를 가져옴\r\n    useEffect(() => {\r\n        fetchLocation();\r\n    }, [address]);\r\n\r\n    useEffect(() => {\r\n        if (location) {\r\n            maps();\r\n        }\r\n    }, [location]);  // lat과 lon이 변경될 때마다 effect 실행\r\n\r\n    const maps = () => {\r\n        if (mapContainerRef.current) {  // mapContainerRef.current가 유효할 때만 실행\r\n            const container = mapContainerRef.current;\r\n            const options = {\r\n                center: new kakao.maps.LatLng(lat, lon),\r\n                level: 3\r\n            };\r\n            var map = new kakao.maps.Map(container, options);  // 카카오 지도 초기화\r\n\r\n            var markerPosition = new kakao.maps.LatLng(lat, lon);\r\n\r\n            // 마커를 생성합니다\r\n            var marker = new kakao.maps.Marker({\r\n                position: markerPosition,\r\n                clickable: true\r\n            });\r\n\r\n            // 마커가 지도 위에 표시되도록 설정합니다\r\n            marker.setMap(map);\r\n\r\n            // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\r\n            var iwContent = `<div>${location.road_address.building_name}</div>`, // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n                iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n\r\n            // 인포윈도우를 생성합니다\r\n            var infowindow = new kakao.maps.InfoWindow({\r\n                content: iwContent,\r\n                removable: iwRemoveable\r\n            });\r\n\r\n            // 마커 위에 인포윈도우를 표시합니다\r\n            infowindow.open(map, marker);\r\n\r\n        }\r\n    }\r\n\r\n    return <div id={id} ref={mapContainerRef} style={{ width: '100%', height: '100%' }}></div>;  // ref를 div에 설정\r\n};\r\n\r\nexport default Maps;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}