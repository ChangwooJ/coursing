{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchLists } from \"../redux/actions/listActions\";\nconst {\n  kakao\n} = window;\nconst PlanInfo = ({\n  setPositions\n}) => {\n  _s();\n  const api_key = process.env.REACT_APP_API_KEY;\n  const dispatch = useDispatch();\n  const allLists = useSelector(state => state.lists.lists);\n  const lists = useMemo(() => {\n    //useEffect에 객체 전달로 인한 리랜더링 방지\n    return allLists.filter(list => list.user_content_id === 1);\n  }, [allLists]);\n  useEffect(() => {\n    dispatch(fetchLists());\n  }, [dispatch]);\n  useEffect(() => {\n    if (lists.length > 0) {\n      fetchLocations(lists);\n    }\n  }, [lists]);\n  const fetchLocations = async lists => {\n    const locationsPromises = lists.map(async list => {\n      if (list.list_address) {\n        try {\n          const encodedAddress = encodeURIComponent(list.list_address);\n          const loc_res = await axios({\n            method: \"GET\",\n            url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\n            headers: {\n              Authorization: `KakaoAK ${api_key}`\n            }\n          });\n          if (loc_res.data.documents.length > 0) {\n            const document = loc_res.data.documents[0];\n            console.log(document);\n            return {\n              latlng: new kakao.maps.LatLng(document.y, document.x),\n              name: document.road_address ? document.road_address.building_name : '',\n              title: list.user_content_title,\n              memo: list.memo,\n              list_id: list.list_id\n            };\n          }\n        } catch (error) {\n          console.error(\"위치 검색 오류:\", error);\n        }\n      }\n      return null;\n    });\n    const resolvedLocations = await Promise.all(locationsPromises);\n    const filteredLocations = resolvedLocations.filter(location => location !== null);\n    setPositions(filteredLocations);\n  };\n  return null;\n};\n_s(PlanInfo, \"0OR5W5G9uSzf6JvK7qgLnOlQAxU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = PlanInfo;\nexport default PlanInfo;\nvar _c;\n$RefreshReg$(_c, \"PlanInfo\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","axios","useDispatch","useSelector","fetchLists","kakao","window","PlanInfo","setPositions","_s","api_key","process","env","REACT_APP_API_KEY","dispatch","allLists","state","lists","filter","list","user_content_id","length","fetchLocations","locationsPromises","map","list_address","encodedAddress","encodeURIComponent","loc_res","method","url","headers","Authorization","data","documents","document","console","log","latlng","maps","LatLng","y","x","name","road_address","building_name","title","user_content_title","memo","list_id","error","resolvedLocations","Promise","all","filteredLocations","location","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/plan_info.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchLists } from \"../redux/actions/listActions\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst PlanInfo = ({setPositions}) => {\r\n    const api_key = process.env.REACT_APP_API_KEY;\r\n    const dispatch = useDispatch();\r\n    const allLists = useSelector((state) => state.lists.lists);\r\n    const lists = useMemo(()=>{     //useEffect에 객체 전달로 인한 리랜더링 방지\r\n        return allLists.filter(list => list.user_content_id === 1);\r\n    }, [allLists]);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchLists());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (lists.length > 0) {\r\n            fetchLocations(lists);\r\n        }\r\n    }, [lists]);\r\n\r\n    const fetchLocations = async (lists) => {\r\n        const locationsPromises = lists.map(async (list) => {\r\n            if (list.list_address) {\r\n                try {\r\n                    const encodedAddress = encodeURIComponent(list.list_address);\r\n                    const loc_res = await axios({\r\n                        method: \"GET\",\r\n                        url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\r\n                        headers: {\r\n                            Authorization: `KakaoAK ${api_key}`,\r\n                        },\r\n                    });\r\n\r\n                    if (loc_res.data.documents.length > 0) {\r\n                        const document = loc_res.data.documents[0];\r\n                        console.log(document);\r\n                        return { \r\n                            latlng: new kakao.maps.LatLng(document.y, document.x),\r\n                            name: document.road_address ? document.road_address.building_name : '',\r\n                            title: list.user_content_title,\r\n                            memo: list.memo,\r\n                            list_id: list.list_id\r\n                        };\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"위치 검색 오류:\", error);\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n\r\n        const resolvedLocations = await Promise.all(locationsPromises);\r\n        const filteredLocations = resolvedLocations.filter(location => location !== null);\r\n        setPositions(filteredLocations);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default PlanInfo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}