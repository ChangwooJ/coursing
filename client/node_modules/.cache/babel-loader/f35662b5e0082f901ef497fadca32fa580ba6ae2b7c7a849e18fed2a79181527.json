{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nconst {\n  kakao\n} = window;\nconst fetchLocations = async ({\n  lists,\n  setPositions\n}) => {\n  _s();\n  const api_key = process.env.REACT_APP_API_KEY;\n  useEffect(() => {\n    if (lists.length > 0) {\n      fetchLocations(lists);\n    }\n  }, [lists]);\n  const locationsPromises = lists.map(async list => {\n    if (list.list_address) {\n      try {\n        const encodedAddress = encodeURIComponent(list.list_address);\n        const loc_res = await axios({\n          method: \"GET\",\n          url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\n          headers: {\n            Authorization: `KakaoAK ${api_key}`\n          }\n        });\n        if (loc_res.data && loc_res.data.documents.length > 0) {\n          const document = loc_res.data.documents[0];\n          return {\n            latlng: new kakao.maps.LatLng(document.y, document.x),\n            name: document.road_address ? document.road_address.building_name : '',\n            title: list.user_content_title,\n            memo: list.memo,\n            list_id: list.list_id,\n            category: list.cate_img_src,\n            start_time: list.start_time,\n            end_time: list.end_time\n          };\n        }\n      } catch (error) {\n        console.error(\"위치 검색 오류:\", error);\n      }\n    }\n    return null;\n  });\n  const resolvedLocations = await Promise.all(locationsPromises);\n  const filteredLocations = resolvedLocations.filter(location => location !== null);\n  setPositions(filteredLocations);\n};\n_s(fetchLocations, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport default fetchLocations;","map":{"version":3,"names":["axios","kakao","window","fetchLocations","lists","setPositions","_s","api_key","process","env","REACT_APP_API_KEY","useEffect","length","locationsPromises","map","list","list_address","encodedAddress","encodeURIComponent","loc_res","method","url","headers","Authorization","data","documents","document","latlng","maps","LatLng","y","x","name","road_address","building_name","title","user_content_title","memo","list_id","category","cate_img_src","start_time","end_time","error","console","resolvedLocations","Promise","all","filteredLocations","filter","location"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/fetchLoc.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst fetchLocations = async ({ lists, setPositions }) => {\r\n    const api_key = process.env.REACT_APP_API_KEY;\r\n\r\n    useEffect(() => {\r\n        if (lists.length > 0) {\r\n            fetchLocations(lists);\r\n        }\r\n    }, [lists]);\r\n\r\n    const locationsPromises = lists.map(async (list) => {\r\n        if (list.list_address) {\r\n            try {\r\n                const encodedAddress = encodeURIComponent(list.list_address);\r\n                const loc_res = await axios({\r\n                    method: \"GET\",\r\n                    url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\r\n                    headers: {\r\n                        Authorization: `KakaoAK ${api_key}`,\r\n                    },\r\n                });\r\n\r\n                if (loc_res.data && loc_res.data.documents.length > 0) {\r\n                    const document = loc_res.data.documents[0];\r\n                    return { \r\n                        latlng: new kakao.maps.LatLng(document.y, document.x),\r\n                        name: document.road_address ? document.road_address.building_name : '',\r\n                        title: list.user_content_title,\r\n                        memo: list.memo,\r\n                        list_id: list.list_id,\r\n                        category: list.cate_img_src,\r\n                        start_time: list.start_time,\r\n                        end_time: list.end_time\r\n                    };\r\n                }\r\n            } catch (error) {\r\n                console.error(\"위치 검색 오류:\", error);\r\n            }\r\n        }\r\n        return null;\r\n    });\r\n\r\n    const resolvedLocations = await Promise.all(locationsPromises);\r\n    const filteredLocations = resolvedLocations.filter(location => location !== null);\r\n    setPositions(filteredLocations);\r\n}\r\n\r\nexport default fetchLocations;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAM;EAAEC;AAAM,CAAC,GAAGC,MAAM;AAExB,MAAMC,cAAc,GAAG,MAAAA,CAAO;EAAEC,KAAK;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EAE7CC,SAAS,CAAC,MAAM;IACZ,IAAIP,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAE;MAClBT,cAAc,CAACC,KAAK,CAAC;IACzB;EACJ,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMS,iBAAiB,GAAGT,KAAK,CAACU,GAAG,CAAC,MAAOC,IAAI,IAAK;IAChD,IAAIA,IAAI,CAACC,YAAY,EAAE;MACnB,IAAI;QACA,MAAMC,cAAc,GAAGC,kBAAkB,CAACH,IAAI,CAACC,YAAY,CAAC;QAC5D,MAAMG,OAAO,GAAG,MAAMnB,KAAK,CAAC;UACxBoB,MAAM,EAAE,KAAK;UACbC,GAAG,EAAE,6DAA6DJ,cAAc,EAAE;UAClFK,OAAO,EAAE;YACLC,aAAa,EAAE,WAAWhB,OAAO;UACrC;QACJ,CAAC,CAAC;QAEF,IAAIY,OAAO,CAACK,IAAI,IAAIL,OAAO,CAACK,IAAI,CAACC,SAAS,CAACb,MAAM,GAAG,CAAC,EAAE;UACnD,MAAMc,QAAQ,GAAGP,OAAO,CAACK,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;UAC1C,OAAO;YACHE,MAAM,EAAE,IAAI1B,KAAK,CAAC2B,IAAI,CAACC,MAAM,CAACH,QAAQ,CAACI,CAAC,EAAEJ,QAAQ,CAACK,CAAC,CAAC;YACrDC,IAAI,EAAEN,QAAQ,CAACO,YAAY,GAAGP,QAAQ,CAACO,YAAY,CAACC,aAAa,GAAG,EAAE;YACtEC,KAAK,EAAEpB,IAAI,CAACqB,kBAAkB;YAC9BC,IAAI,EAAEtB,IAAI,CAACsB,IAAI;YACfC,OAAO,EAAEvB,IAAI,CAACuB,OAAO;YACrBC,QAAQ,EAAExB,IAAI,CAACyB,YAAY;YAC3BC,UAAU,EAAE1B,IAAI,CAAC0B,UAAU;YAC3BC,QAAQ,EAAE3B,IAAI,CAAC2B;UACnB,CAAC;QACL;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACrC;IACJ;IACA,OAAO,IAAI;EACf,CAAC,CAAC;EAEF,MAAME,iBAAiB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAClC,iBAAiB,CAAC;EAC9D,MAAMmC,iBAAiB,GAAGH,iBAAiB,CAACI,MAAM,CAACC,QAAQ,IAAIA,QAAQ,KAAK,IAAI,CAAC;EACjF7C,YAAY,CAAC2C,iBAAiB,CAAC;AACnC,CAAC;AAAA1C,EAAA,CA5CKH,cAAc;AA8CpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}