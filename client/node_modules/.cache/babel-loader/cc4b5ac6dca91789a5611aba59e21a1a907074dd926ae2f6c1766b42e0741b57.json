{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\component\\\\list_map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchLists } from \"../redux/actions/listActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst ListMap = () => {\n  _s();\n  const mapContainerRef = useRef(null); // useRef를 사용하여 DOM 요소를 참조\n  const [location, setLocation] = useState([]); // 위치 상태를 추가\n  const api_key = process.env.REACT_APP_API_KEY; //api_key .env파일 활용\n\n  const dispatch = useDispatch();\n  const lists = useSelector(state => state.lists.lists);\n  console.log(lists);\n  useEffect(() => {\n    dispatch(fetchLists());\n  }, [dispatch]);\n  useEffect(() => {\n    if (lists.length > 0) {\n      fetchLocations(lists);\n    }\n  }, [lists]);\n  const fetchLocations = async lists => {\n    lists.map(async list => {\n      if (list.list_address) {\n        try {\n          const encodedAddress = encodeURIComponent(list.list_address);\n          const loc_res = await axios({\n            method: \"GET\",\n            url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\n            headers: {\n              Authorization: `KakaoAK ${api_key}`\n            }\n          });\n          if (loc_res.data.documents.length > 0) {\n            const document = loc_res.data.documents[0];\n            return {\n              ...list,\n              lat: document.y,\n              lon: document.x\n            };\n          }\n        } catch (error) {\n          console.error(\"위치 검색 오류:\", error);\n        }\n      }\n    });\n  };\n  const maps = () => {\n    fetchLocations(lists);\n    console.log(\"o\");\n    if (mapContainerRef.current) {\n      // mapContainerRef.current가 유효할 때만 실행\n      const container = mapContainerRef.current;\n      const options = {\n        center: new kakao.maps.LatLng(location[0].lat, location[0].lon),\n        level: 3\n      };\n      var map = new kakao.maps.Map(container, options); // 카카오 지도 초기화\n\n      location.forEach(location => {\n        var markerPosition = new kakao.maps.LatLng(location.lat, location.lon);\n        console.log(location.lat);\n\n        // 마커를 생성합니다\n        var marker = new kakao.maps.Marker({\n          position: markerPosition,\n          clickable: true\n        });\n\n        // 마커가 지도 위에 표시되도록 설정합니다\n        marker.setMap(map);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainerRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 12\n  }, this); // ref를 div에 설정\n};\n_s(ListMap, \"/0IWwlDFkyy+/yLuievKGF5LpP8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ListMap;\nexport default ListMap;\nvar _c;\n$RefreshReg$(_c, \"ListMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","useDispatch","useSelector","fetchLists","jsxDEV","_jsxDEV","kakao","window","ListMap","_s","mapContainerRef","location","setLocation","api_key","process","env","REACT_APP_API_KEY","dispatch","lists","state","console","log","length","fetchLocations","map","list","list_address","encodedAddress","encodeURIComponent","loc_res","method","url","headers","Authorization","data","documents","document","lat","y","lon","x","error","maps","current","container","options","center","LatLng","level","Map","forEach","markerPosition","marker","Marker","position","clickable","setMap","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/list_map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchLists } from \"../redux/actions/listActions\";\r\n\r\n\r\nconst { kakao } = window;\r\n\r\nconst ListMap = () => {\r\n    const mapContainerRef = useRef(null);  // useRef를 사용하여 DOM 요소를 참조\r\n    const [location, setLocation] = useState([]);  // 위치 상태를 추가\r\n    const api_key = process.env.REACT_APP_API_KEY;  //api_key .env파일 활용\r\n\r\n    const dispatch = useDispatch();\r\n    const lists = useSelector((state) => state.lists.lists);\r\n    console.log(lists);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchLists());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (lists.length > 0) {\r\n            fetchLocations(lists);\r\n        }\r\n    }, [lists]);\r\n\r\n\r\n    const fetchLocations = async (lists) => {\r\n        lists.map(async(list) => {\r\n            if (list.list_address) {\r\n                try {\r\n                    const encodedAddress = encodeURIComponent(list.list_address);\r\n                    const loc_res = await axios({\r\n                        method: \"GET\",\r\n                        url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\r\n                        headers: {\r\n                            Authorization: `KakaoAK ${api_key}`,\r\n                        },\r\n                    });\r\n    \r\n                    if (loc_res.data.documents.length > 0) {\r\n                        const document = loc_res.data.documents[0];\r\n                        return { ...list, lat: document.y, lon: document.x };\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"위치 검색 오류:\", error);\r\n                }\r\n            }\r\n            \r\n        });\r\n    };\r\n\r\n    const maps = () => {\r\n        fetchLocations(lists);\r\n        console.log(\"o\");\r\n\r\n        if (mapContainerRef.current) {  // mapContainerRef.current가 유효할 때만 실행\r\n            const container = mapContainerRef.current;\r\n            const options = {\r\n                center: new kakao.maps.LatLng(location[0].lat, location[0].lon),\r\n                level: 3\r\n            };\r\n            var map = new kakao.maps.Map(container, options);  // 카카오 지도 초기화\r\n\r\n            location.forEach((location) => {\r\n                var markerPosition = new kakao.maps.LatLng(location.lat, location.lon);\r\n                console.log(location.lat);\r\n\r\n                // 마커를 생성합니다\r\n                var marker = new kakao.maps.Marker({\r\n                    position: markerPosition,\r\n                    clickable: true\r\n                });\r\n\r\n                // 마커가 지도 위에 표시되도록 설정합니다\r\n                marker.setMap(map);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    return <div ref={mapContainerRef} style={{ width: '100%', height: '100%' }}></div>;  // ref를 div에 설정\r\n};\r\n\r\nexport default ListMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}