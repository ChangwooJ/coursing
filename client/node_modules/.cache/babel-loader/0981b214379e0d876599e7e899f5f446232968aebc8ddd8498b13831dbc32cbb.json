{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\component\\\\maps.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport fetchLocations from \"./fetchLoc\";\nimport \"../css/list_map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst Maps = ({\n  content,\n  post\n}) => {\n  _s();\n  const mapContainerRef = useRef(null); // useRef를 사용하여 DOM 요소를 참조\n  const [locations, setLocations] = useState(null); // 위치 상태를 추가\n\n  useEffect(() => {\n    const fetchLoc = async () => {\n      if (content) {\n        const locs = await fetchLocations([content]);\n        if (locs) {\n          setLocations(locs[0]);\n        } else {\n          console.log(\"fetchLocations returned invalid data\");\n        }\n      }\n    };\n    fetchLoc();\n  }, [content]);\n  useEffect(() => {\n    if (locations) {\n      maps();\n    }\n  }, [locations]); // lat과 lon이 변경될 때마다 effect 실행\n\n  const maps = () => {\n    if (mapContainerRef.current && locations) {\n      // mapContainerRef.current가 유효할 때만 실행\n      const container = mapContainerRef.current;\n      const options = {\n        center: locations.latlng,\n        level: 4\n      };\n      var map = new kakao.maps.Map(container, options); // 카카오 지도 초기화\n\n      var markerPosition = locations.latlng;\n\n      // 마커를 생성합니다\n      const marker = () => {\n        var mark = new kakao.maps.Marker({\n          position: markerPosition,\n          clickable: true\n        });\n      };\n\n      // 마커가 지도 위에 표시되도록 설정합니다\n      marker.setMap(map);\n\n      // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\n      /*var iwContent = `<div>${location.road_address.building_name}</div>`, // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n          iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n      */\n      /* 인포윈도우를 생성합니다\r\n      var infowindow = new kakao.maps.InfoWindow({\r\n          content: iwContent,\r\n          removable: iwRemoveable\r\n      });*/\n\n      /* 마커 위에 인포윈도우를 표시합니다\r\n      infowindow.open(map, marker);\r\n        map.setZoomable(false);*/\n\n      kakao.maps.event.addListener(map, 'tilesloaded', function () {\n        // 현재 지도의 중심 좌표 가져오기\n        var center = map.getCenter();\n\n        // 새로운 중심 좌표를 계산 (오른쪽으로 20% 이동)\n        var moveLatLon = new kakao.maps.LatLng(center.getLat(), center.getLng() - (map.getBounds().getSouthWest().getLng() - center.getLng()) * 0.3);\n\n        // 애니메이션 없이 바로 중심을 설정\n        if (post) {\n          map.setCenter(moveLatLon);\n          map.setZoomable(false);\n          map.setDraggable(false);\n        }\n      });\n    }\n  };\n  if (!content || !locations) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_map\",\n    ref: mapContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 12\n  }, this); // ref를 div에 설정\n};\n_s(Maps, \"kkVOZpLLyecWe5OQV0sneoVtx3I=\");\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useEffect","useRef","useState","fetchLocations","jsxDEV","_jsxDEV","kakao","window","Maps","content","post","_s","mapContainerRef","locations","setLocations","fetchLoc","locs","console","log","maps","current","container","options","center","latlng","level","map","Map","markerPosition","marker","mark","Marker","position","clickable","setMap","event","addListener","getCenter","moveLatLon","LatLng","getLat","getLng","getBounds","getSouthWest","setCenter","setZoomable","setDraggable","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/maps.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport fetchLocations from \"./fetchLoc\";\r\nimport \"../css/list_map.css\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst Maps = ({ content, post }) => {\r\n    const mapContainerRef = useRef(null);  // useRef를 사용하여 DOM 요소를 참조\r\n    const [locations, setLocations] = useState(null);  // 위치 상태를 추가\r\n\r\n    useEffect(() => {\r\n        const fetchLoc = async () => {\r\n            if (content) {\r\n                const locs = await fetchLocations([content]);\r\n                if (locs) {\r\n                    setLocations(locs[0]);\r\n                } else {\r\n                    console.log(\"fetchLocations returned invalid data\");\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchLoc();\r\n    }, [content]);\r\n\r\n    useEffect(() => {\r\n        if (locations) {\r\n            maps();\r\n        }\r\n    }, [locations]);  // lat과 lon이 변경될 때마다 effect 실행\r\n\r\n    const maps = () => {\r\n        if (mapContainerRef.current && locations) {  // mapContainerRef.current가 유효할 때만 실행\r\n            const container = mapContainerRef.current;\r\n            const options = {\r\n                center: locations.latlng,\r\n                level: 4\r\n            };\r\n            var map = new kakao.maps.Map(container, options);  // 카카오 지도 초기화\r\n\r\n            var markerPosition = locations.latlng;\r\n\r\n            // 마커를 생성합니다\r\n            const marker = () => {\r\n                var mark = new kakao.maps.Marker({\r\n                    position: markerPosition,\r\n                    clickable: true\r\n                });\r\n            } \r\n\r\n            // 마커가 지도 위에 표시되도록 설정합니다\r\n            marker.setMap(map);\r\n\r\n            // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\r\n            /*var iwContent = `<div>${location.road_address.building_name}</div>`, // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n                iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n            */\r\n            /* 인포윈도우를 생성합니다\r\n            var infowindow = new kakao.maps.InfoWindow({\r\n                content: iwContent,\r\n                removable: iwRemoveable\r\n            });*/\r\n\r\n            /* 마커 위에 인포윈도우를 표시합니다\r\n            infowindow.open(map, marker);\r\n\r\n            map.setZoomable(false);*/\r\n\r\n            kakao.maps.event.addListener(map, 'tilesloaded', function() {\r\n                // 현재 지도의 중심 좌표 가져오기\r\n                var center = map.getCenter();\r\n            \r\n                // 새로운 중심 좌표를 계산 (오른쪽으로 20% 이동)\r\n                var moveLatLon = new kakao.maps.LatLng(center.getLat(), center.getLng() - (map.getBounds().getSouthWest().getLng() - center.getLng()) * 0.3);\r\n            \r\n                // 애니메이션 없이 바로 중심을 설정\r\n                if(post){\r\n                    map.setCenter(moveLatLon);\r\n                    map.setZoomable(false);\r\n                    map.setDraggable(false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    if (!content || !locations) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return <div className=\"main_map\" ref={mapContainerRef} ></div>;  // ref를 div에 설정\r\n};\r\n\r\nexport default Maps;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}