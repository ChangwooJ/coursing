{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\component\\\\list_map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useContext } from \"react\";\nimport Search from \"./search\";\nimport { PositionsContext } from '../context/PositionsContext';\nimport { LocationContext } from '../context/LocationContext';\nimport useFetchMaps from \"./fetchMaps\";\nimport fetchLocations from \"./fetchLoc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst ListMap = () => {\n  _s();\n  const mapContainerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [searchPosition, setSearchPosition] = useState(null);\n  const [loc, setLoc] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const {\n    positions\n  } = useContext(PositionsContext);\n  const {\n    location\n  } = useContext(LocationContext);\n  const {\n    option,\n    markers\n  } = useFetchMaps({\n    content: positions\n  });\n  useEffect(() => {\n    if (location !== null && map) {\n      movePlanPosition();\n    }\n  }, [location]);\n  useEffect(() => {\n    if (searchPosition !== null && map) {\n      moveSearchPosition();\n    }\n  }, [searchPosition]);\n  useEffect(() => {\n    if (mapContainerRef.current && option.center && markers.length > 0) {\n      const newMap = new kakao.maps.Map(mapContainerRef.current, option);\n      mapRef.current = newMap;\n      setMap(newMap);\n      markers.forEach(marker => marker.setMap(newMap)); //마커 설정\n    }\n  }, [option, markers]);\n\n  //선 생성 좌표 모음\n  useEffect(() => {\n    const fetchAllLocations = async () => {\n      const locs = [];\n      for (const con of positions) {\n        const loc = await fetchLocations(con);\n        if (loc && loc.length > 0) {\n          locs.push(...loc);\n        }\n      }\n      setLocations(locs);\n    };\n    fetchAllLocations();\n  }, [positions]);\n  const createPolyline = (map, positions) => {\n    const polyline = new kakao.maps.Polyline({\n      path: positions,\n      strokeWeight: 3,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.7,\n      strokeStyle: 'solid'\n    });\n    polyline.setMap(map);\n    return polyline;\n  };\n\n  // 마커의 위치를 저장\n  const position = locations.map(loc => loc.latlng);\n\n  // 선 그리기\n  const polyline = createPolyline(mapRef.current, position);\n  const movePlanPosition = () => {\n    map.panTo(location);\n  };\n  const moveSearchPosition = () => {\n    map.panTo(searchPosition);\n\n    // 마커 생성\n    var marker = new kakao.maps.Marker({\n      position: searchPosition,\n      clickable: true\n    });\n    marker.setMap(map);\n    var iwContent = `<div>${loc.place_name}</div>`,\n      iwRemoveable = true;\n\n    // 인포윈도우 생성\n    var infowindow = new kakao.maps.InfoWindow({\n      content: iwContent,\n      removable: iwRemoveable\n    });\n    infowindow.open(map, marker);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list_map_wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map\",\n      ref: mapContainerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      setLoc: setLoc,\n      setSearchPosition: setSearchPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(ListMap, \"SVMZ9N7fKwUqDiuiWKzoVrMDtuc=\", false, function () {\n  return [useFetchMaps];\n});\n_c = ListMap;\nexport default ListMap;\nvar _c;\n$RefreshReg$(_c, \"ListMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useContext","Search","PositionsContext","LocationContext","useFetchMaps","fetchLocations","jsxDEV","_jsxDEV","kakao","window","ListMap","_s","mapContainerRef","mapRef","map","setMap","searchPosition","setSearchPosition","loc","setLoc","locations","setLocations","positions","location","option","markers","content","movePlanPosition","moveSearchPosition","current","center","length","newMap","maps","Map","forEach","marker","fetchAllLocations","locs","con","push","createPolyline","polyline","Polyline","path","strokeWeight","strokeColor","strokeOpacity","strokeStyle","position","latlng","panTo","Marker","clickable","iwContent","place_name","iwRemoveable","infowindow","InfoWindow","removable","open","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/list_map.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useContext } from \"react\";\r\nimport Search from \"./search\";\r\nimport { PositionsContext } from '../context/PositionsContext';\r\nimport { LocationContext } from '../context/LocationContext';\r\nimport useFetchMaps from \"./fetchMaps\";\r\nimport fetchLocations from \"./fetchLoc\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst ListMap = () => {\r\n    const mapContainerRef = useRef(null);\r\n    const mapRef = useRef(null);\r\n    const [map, setMap] = useState(null);\r\n    const [searchPosition, setSearchPosition] = useState(null);\r\n    const [loc, setLoc] = useState([]);\r\n    const [locations, setLocations] = useState([]);\r\n    const { positions } = useContext(PositionsContext);\r\n    const { location } = useContext(LocationContext);\r\n    const { option, markers } = useFetchMaps({ content: positions });\r\n\r\n    useEffect(() => {\r\n        if (location !== null && map) {\r\n            movePlanPosition();\r\n        }\r\n    }, [location]);\r\n\r\n    useEffect(() => {\r\n        if (searchPosition !== null && map) {\r\n            moveSearchPosition();\r\n        }\r\n    }, [searchPosition]);\r\n\r\n    useEffect(() => {\r\n        if (mapContainerRef.current && option.center && markers.length > 0) {\r\n            const newMap = new kakao.maps.Map(mapContainerRef.current, option);\r\n            mapRef.current = newMap;\r\n            setMap(newMap);\r\n            markers.forEach(marker => marker.setMap(newMap));  //마커 설정\r\n        }\r\n    }, [option, markers]);\r\n\r\n    //선 생성 좌표 모음\r\n    useEffect(() => {\r\n        const fetchAllLocations = async () => {\r\n            const locs = [];\r\n            for (const con of positions) {\r\n                const loc = await fetchLocations(con);\r\n                if (loc && loc.length > 0) {\r\n                    locs.push(...loc);\r\n                }\r\n            }\r\n            setLocations(locs);\r\n        };\r\n\r\n        fetchAllLocations();\r\n    }, [positions]);\r\n\r\n    const createPolyline = (map, positions) => {\r\n        const polyline = new kakao.maps.Polyline({\r\n            path: positions,\r\n            strokeWeight: 3,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 0.7,\r\n            strokeStyle: 'solid'\r\n        });\r\n\r\n        polyline.setMap(map);\r\n        return polyline;\r\n    };\r\n\r\n    // 마커의 위치를 저장\r\n    const position = locations.map(loc => loc.latlng);\r\n\r\n    // 선 그리기\r\n    const polyline = createPolyline(mapRef.current, position);\r\n\r\n    const movePlanPosition = () => {\r\n        map.panTo(location);\r\n    }\r\n\r\n    const moveSearchPosition = () => {\r\n        map.panTo(searchPosition);\r\n\r\n        // 마커 생성\r\n        var marker = new kakao.maps.Marker({\r\n            position: searchPosition,\r\n            clickable: true\r\n        });\r\n\r\n        marker.setMap(map);\r\n\r\n        var iwContent = `<div>${loc.place_name}</div>`,\r\n            iwRemoveable = true;\r\n\r\n        // 인포윈도우 생성\r\n        var infowindow = new kakao.maps.InfoWindow({\r\n            content: iwContent,\r\n            removable: iwRemoveable\r\n        });\r\n\r\n        infowindow.open(map, marker);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"list_map_wrap\">\r\n            <div className=\"map\" ref={mapContainerRef}></div>\r\n            <Search setLoc={setLoc} setSearchPosition={setSearchPosition} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}