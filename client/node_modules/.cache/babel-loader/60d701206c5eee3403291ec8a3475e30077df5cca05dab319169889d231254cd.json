{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\component\\\\MyList\\\\list_map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useContext } from \"react\";\nimport Search from \"./search\";\nimport { PositionsContext } from '../../context/PositionsContext';\nimport { LocationContext } from '../../context/LocationContext';\nimport useFetchMaps from \"../etc/fetchMaps\";\nimport fetchLocations from \"../etc/fetchLoc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst ListMap = () => {\n  _s();\n  const mapContainerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [searchPosition, setSearchPosition] = useState(null);\n  const [loc, setLoc] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [polyline, setPolyline] = useState(null);\n  const {\n    positions\n  } = useContext(PositionsContext);\n  const {\n    location\n  } = useContext(LocationContext);\n  const [results, setResults] = useState([]);\n  const {\n    option,\n    markers\n  } = useFetchMaps({\n    content: positions\n  });\n  console.log(results);\n  useEffect(() => {\n    if (location !== null && map) {\n      movePlanPosition();\n    }\n  }, [location]);\n  useEffect(() => {\n    if (searchPosition !== null && map) {\n      moveSearchPosition();\n    }\n  }, [searchPosition]);\n  useEffect(() => {\n    if (mapContainerRef.current && option.center && markers.length > 0) {\n      const newMap = new kakao.maps.Map(mapContainerRef.current, option);\n      mapRef.current = newMap;\n      setMap(newMap);\n      markers.forEach(marker => marker.setMap(newMap)); //마커 설정\n    }\n  }, [option, markers]);\n\n  //선 생성 좌표 모음\n  useEffect(() => {\n    const fetchAllLocations = async () => {\n      const locs = [];\n      for (const con of positions) {\n        const loc = await fetchLocations(con);\n        if (loc && loc.length > 0) {\n          locs.push(...loc);\n        }\n      }\n      setLocations(locs);\n    };\n    fetchAllLocations();\n  }, [positions]);\n  const createPolyline = (map, positions) => {\n    const polyline = new kakao.maps.Polyline({\n      path: positions,\n      strokeWeight: 3,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.7,\n      strokeStyle: 'solid'\n    });\n    polyline.setMap(map);\n    return polyline;\n  };\n\n  // 마커의 위치를 저장\n  const position = locations.map(loc => loc.latlng);\n\n  // 폴리라인 업데이트 함수\n  const updatePolyline = () => {\n    // 기존의 폴리라인이 존재하면 지도에서 제거\n    if (polyline) {\n      polyline.setMap(null);\n    }\n\n    // 새로운 폴리라인 생성 및 상태 업데이트\n    const position = locations.map(loc => loc.latlng);\n    const newPolyline = createPolyline(mapRef.current, position);\n    setPolyline(newPolyline);\n  };\n  useEffect(() => {\n    // 위치가 변경될 때마다 폴리라인 업데이트\n    if (mapRef.current && locations.length > 0) {\n      updatePolyline();\n    }\n  }, [locations]);\n  const movePlanPosition = () => {\n    map.panTo(location);\n  };\n  const moveSearchPosition = () => {\n    map.setCenter(searchPosition);\n    results.forEach(res => {\n      var marker = new kakao.maps.Marker({\n        position: new kakao.maps.LatLng(res.y, res.x),\n        clickable: true\n      });\n      marker.setMap(map);\n      var iwContent = `<div>${loc.place_name}</div>`,\n        iwRemoveable = true;\n\n      // 인포윈도우 생성\n      var infowindow = new kakao.maps.InfoWindow({\n        content: iwContent,\n        removable: iwRemoveable\n      });\n      infowindow.open(map, marker);\n    });\n    //markers.forEach(marker => marker.setMap(newMap));\n    // 마커 생성\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list_map_wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map\",\n      ref: mapContainerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      setLoc: setLoc,\n      setSearchPosition: setSearchPosition,\n      setResults: setResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n_s(ListMap, \"PzogddPsbAErGLABGOsu+nzyywc=\", false, function () {\n  return [useFetchMaps];\n});\n_c = ListMap;\nexport default ListMap;\nvar _c;\n$RefreshReg$(_c, \"ListMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useContext","Search","PositionsContext","LocationContext","useFetchMaps","fetchLocations","jsxDEV","_jsxDEV","kakao","window","ListMap","_s","mapContainerRef","mapRef","map","setMap","searchPosition","setSearchPosition","loc","setLoc","locations","setLocations","polyline","setPolyline","positions","location","results","setResults","option","markers","content","console","log","movePlanPosition","moveSearchPosition","current","center","length","newMap","maps","Map","forEach","marker","fetchAllLocations","locs","con","push","createPolyline","Polyline","path","strokeWeight","strokeColor","strokeOpacity","strokeStyle","position","latlng","updatePolyline","newPolyline","panTo","setCenter","res","Marker","LatLng","y","x","clickable","iwContent","place_name","iwRemoveable","infowindow","InfoWindow","removable","open","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/MyList/list_map.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useContext } from \"react\";\r\nimport Search from \"./search\";\r\nimport { PositionsContext } from '../../context/PositionsContext';\r\nimport { LocationContext } from '../../context/LocationContext';\r\nimport useFetchMaps from \"../etc/fetchMaps\";\r\nimport fetchLocations from \"../etc/fetchLoc\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst ListMap = () => {\r\n    const mapContainerRef = useRef(null);\r\n    const mapRef = useRef(null);\r\n    const [map, setMap] = useState(null);\r\n    const [searchPosition, setSearchPosition] = useState(null);\r\n    const [loc, setLoc] = useState([]);\r\n    const [locations, setLocations] = useState([]);\r\n    const [polyline, setPolyline] = useState(null);\r\n    const { positions } = useContext(PositionsContext);\r\n    const { location } = useContext(LocationContext);\r\n    const [results, setResults] = useState([]);\r\n    const { option, markers } = useFetchMaps({ content: positions });\r\nconsole.log(results);\r\n    useEffect(() => {\r\n        if (location !== null && map) {\r\n            movePlanPosition();\r\n        }\r\n    }, [location]);\r\n\r\n    useEffect(() => {\r\n        if (searchPosition !== null && map) {\r\n            moveSearchPosition();\r\n        }\r\n    }, [searchPosition]);\r\n\r\n    useEffect(() => {\r\n        if (mapContainerRef.current && option.center && markers.length > 0) {\r\n            const newMap = new kakao.maps.Map(mapContainerRef.current, option);\r\n            mapRef.current = newMap;\r\n            setMap(newMap);\r\n            markers.forEach(marker => marker.setMap(newMap));  //마커 설정\r\n        }\r\n    }, [option, markers]);\r\n\r\n    //선 생성 좌표 모음\r\n    useEffect(() => {\r\n        const fetchAllLocations = async () => {\r\n            const locs = [];\r\n            for (const con of positions) {\r\n                const loc = await fetchLocations(con);\r\n                if (loc && loc.length > 0) {\r\n                    locs.push(...loc);\r\n                }\r\n            }\r\n            setLocations(locs);\r\n        };\r\n\r\n        fetchAllLocations();\r\n    }, [positions]);\r\n\r\n    const createPolyline = (map, positions) => {\r\n        const polyline = new kakao.maps.Polyline({\r\n            path: positions,\r\n            strokeWeight: 3,\r\n            strokeColor: '#FF0000',\r\n            strokeOpacity: 0.7,\r\n            strokeStyle: 'solid'\r\n        });\r\n\r\n        polyline.setMap(map);\r\n        return polyline;\r\n    };\r\n\r\n    // 마커의 위치를 저장\r\n    const position = locations.map(loc => loc.latlng);\r\n\r\n    // 폴리라인 업데이트 함수\r\n    const updatePolyline = () => {\r\n        // 기존의 폴리라인이 존재하면 지도에서 제거\r\n        if (polyline) {\r\n            polyline.setMap(null);\r\n        }\r\n\r\n        // 새로운 폴리라인 생성 및 상태 업데이트\r\n        const position = locations.map(loc => loc.latlng);\r\n        const newPolyline = createPolyline(mapRef.current, position);\r\n        setPolyline(newPolyline);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // 위치가 변경될 때마다 폴리라인 업데이트\r\n        if (mapRef.current && locations.length > 0) {\r\n            updatePolyline();\r\n        }\r\n    }, [locations]);\r\n\r\n\r\n    const movePlanPosition = () => {\r\n        map.panTo(location);\r\n    }\r\n\r\n    const moveSearchPosition = () => {\r\n        map.setCenter(searchPosition);\r\n\r\n        results.forEach(res => {\r\n            var marker = new kakao.maps.Marker({\r\n                position: new kakao.maps.LatLng(res.y, res.x),\r\n                clickable: true\r\n            });\r\n            marker.setMap(map);\r\n            var iwContent = `<div>${loc.place_name}</div>`,\r\n                iwRemoveable = true;\r\n    \r\n            // 인포윈도우 생성\r\n            var infowindow = new kakao.maps.InfoWindow({\r\n                content: iwContent,\r\n                removable: iwRemoveable\r\n            });\r\n    \r\n            infowindow.open(map, marker);\r\n        })\r\n        //markers.forEach(marker => marker.setMap(newMap));\r\n        // 마커 생성\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"list_map_wrap\">\r\n            <div className=\"map\" ref={mapContainerRef}></div>\r\n            <Search setLoc={setLoc} setSearchPosition={setSearchPosition} setResults={setResults} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}