{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\Memo-Jung\\\\coursing\\\\client\\\\src\\\\component\\\\maps.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport fetchLocations from \"./fetchLoc\";\nimport \"../css/list_map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst Maps = ({\n  address,\n  post\n}) => {\n  _s();\n  const mapContainerRef = useRef(null); // useRef를 사용하여 DOM 요소를 참조\n  const [location, setLocation] = useState(null); // 위치 상태를 추가\n  const [lat, setLat] = useState(0);\n  const [lon, setLon] = useState(0);\n  const api_key = process.env.REACT_APP_API_KEY; //api_key .env파일 활용\n\n  useEffect(() => {\n    const fetchLoc = async () => {\n      if (contents.length > 0) {\n        const locs = await fetchLocations(contents);\n        setLocations(locs);\n      }\n    };\n    fetchLoc();\n  }, [contents]);\n  const fetchLocation = async () => {\n    if (address) {\n      try {\n        const encodedAddress = encodeURIComponent(address);\n        const loc_res = await axios({\n          method: \"GET\",\n          url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\n          headers: {\n            Authorization: `KakaoAK ${api_key}`\n          }\n        });\n        if (loc_res.data.documents.length > 0) {\n          const document = loc_res.data.documents[0];\n          setLat(document.y);\n          setLon(document.x);\n          setLocation(document);\n        }\n      } catch (error) {\n        console.error(\"위치 검색 오류:\", error);\n      }\n    }\n  };\n\n  //REST API를 이용해 주소 위치의 정보를 가져옴\n  useEffect(() => {\n    fetchLocation();\n  }, [address]);\n  useEffect(() => {\n    if (location) {\n      maps();\n    }\n  }, [location]); // lat과 lon이 변경될 때마다 effect 실행\n\n  const maps = () => {\n    if (mapContainerRef.current) {\n      // mapContainerRef.current가 유효할 때만 실행\n      const container = mapContainerRef.current;\n      const options = {\n        center: new kakao.maps.LatLng(lat, lon),\n        level: 4\n      };\n      var map = new kakao.maps.Map(container, options); // 카카오 지도 초기화\n\n      var markerPosition = new kakao.maps.LatLng(lat, lon);\n\n      // 마커를 생성합니다\n      var marker = new kakao.maps.Marker({\n        position: markerPosition,\n        clickable: true\n      });\n\n      // 마커가 지도 위에 표시되도록 설정합니다\n      marker.setMap(map);\n\n      // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\n      /*var iwContent = `<div>${location.road_address.building_name}</div>`, // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n          iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n      */\n      /* 인포윈도우를 생성합니다\r\n      var infowindow = new kakao.maps.InfoWindow({\r\n          content: iwContent,\r\n          removable: iwRemoveable\r\n      });*/\n\n      /* 마커 위에 인포윈도우를 표시합니다\r\n      infowindow.open(map, marker);\r\n        map.setZoomable(false);*/\n\n      kakao.maps.event.addListener(map, 'tilesloaded', function () {\n        // 현재 지도의 중심 좌표 가져오기\n        var center = map.getCenter();\n\n        // 새로운 중심 좌표를 계산 (오른쪽으로 20% 이동)\n        var moveLatLon = new kakao.maps.LatLng(center.getLat(), center.getLng() - (map.getBounds().getSouthWest().getLng() - center.getLng()) * 0.3);\n\n        // 애니메이션 없이 바로 중심을 설정\n        if (post) {\n          map.setCenter(moveLatLon);\n          map.setZoomable(false);\n          map.setDraggable(false);\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_map\",\n    ref: mapContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 12\n  }, this); // ref를 div에 설정\n};\n_s(Maps, \"zP1atgqEWFug3dc8R4z3pET8crs=\");\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","fetchLocations","jsxDEV","_jsxDEV","kakao","window","Maps","address","post","_s","mapContainerRef","location","setLocation","lat","setLat","lon","setLon","api_key","process","env","REACT_APP_API_KEY","fetchLoc","contents","length","locs","setLocations","fetchLocation","encodedAddress","encodeURIComponent","loc_res","method","url","headers","Authorization","data","documents","document","y","x","error","console","maps","current","container","options","center","LatLng","level","map","Map","markerPosition","marker","Marker","position","clickable","setMap","event","addListener","getCenter","moveLatLon","getLat","getLng","getBounds","getSouthWest","setCenter","setZoomable","setDraggable","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/maps.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport fetchLocations from \"./fetchLoc\";\r\nimport \"../css/list_map.css\";\r\n\r\nconst { kakao } = window;\r\n\r\nconst Maps = ({ address, post }) => {\r\n    const mapContainerRef = useRef(null);  // useRef를 사용하여 DOM 요소를 참조\r\n    const [location, setLocation] = useState(null);  // 위치 상태를 추가\r\n    const [lat, setLat] = useState(0);\r\n    const [lon, setLon] = useState(0);\r\n    const api_key = process.env.REACT_APP_API_KEY;  //api_key .env파일 활용\r\n\r\n    useEffect(() => {\r\n        const fetchLoc = async () => {\r\n            if (contents.length > 0) {\r\n                const locs = await fetchLocations(contents);\r\n                setLocations(locs);\r\n            }\r\n        };\r\n\r\n        fetchLoc();\r\n    }, [contents]);\r\n\r\n    const fetchLocation = async () => {\r\n        if (address) {\r\n            try {\r\n                const encodedAddress = encodeURIComponent(address);\r\n                const loc_res = await axios({\r\n                    method: \"GET\",\r\n                    url: `https://dapi.kakao.com/v2/local/search/address.json?query=${encodedAddress}`,\r\n                    headers: {\r\n                        Authorization: `KakaoAK ${api_key}`,\r\n                    },\r\n                });\r\n\r\n                if (loc_res.data.documents.length > 0) {\r\n                    const document = loc_res.data.documents[0];\r\n                    setLat(document.y);\r\n                    setLon(document.x);\r\n                    setLocation(document);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"위치 검색 오류:\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    //REST API를 이용해 주소 위치의 정보를 가져옴\r\n    useEffect(() => {\r\n        fetchLocation();\r\n    }, [address]);\r\n\r\n    useEffect(() => {\r\n        if (location) {\r\n            maps();\r\n        }\r\n    }, [location]);  // lat과 lon이 변경될 때마다 effect 실행\r\n\r\n    const maps = () => {\r\n        if (mapContainerRef.current) {  // mapContainerRef.current가 유효할 때만 실행\r\n            const container = mapContainerRef.current;\r\n            const options = {\r\n                center: new kakao.maps.LatLng(lat, lon),\r\n                level: 4\r\n            };\r\n            var map = new kakao.maps.Map(container, options);  // 카카오 지도 초기화\r\n\r\n            var markerPosition = new kakao.maps.LatLng(lat, lon);\r\n\r\n            // 마커를 생성합니다\r\n            var marker = new kakao.maps.Marker({\r\n                position: markerPosition,\r\n                clickable: true\r\n            });\r\n\r\n            // 마커가 지도 위에 표시되도록 설정합니다\r\n            marker.setMap(map);\r\n\r\n            // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\r\n            /*var iwContent = `<div>${location.road_address.building_name}</div>`, // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n                iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n            */\r\n            /* 인포윈도우를 생성합니다\r\n            var infowindow = new kakao.maps.InfoWindow({\r\n                content: iwContent,\r\n                removable: iwRemoveable\r\n            });*/\r\n\r\n            /* 마커 위에 인포윈도우를 표시합니다\r\n            infowindow.open(map, marker);\r\n\r\n            map.setZoomable(false);*/\r\n\r\n            kakao.maps.event.addListener(map, 'tilesloaded', function() {\r\n                // 현재 지도의 중심 좌표 가져오기\r\n                var center = map.getCenter();\r\n            \r\n                // 새로운 중심 좌표를 계산 (오른쪽으로 20% 이동)\r\n                var moveLatLon = new kakao.maps.LatLng(center.getLat(), center.getLng() - (map.getBounds().getSouthWest().getLng() - center.getLng()) * 0.3);\r\n            \r\n                // 애니메이션 없이 바로 중심을 설정\r\n                if(post){\r\n                    map.setCenter(moveLatLon);\r\n                    map.setZoomable(false);\r\n                    map.setDraggable(false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return <div className=\"main_map\" ref={mapContainerRef} ></div>;  // ref를 div에 설정\r\n};\r\n\r\nexport default Maps;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,YAAY;AACvC,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAM;EAAEC;AAAM,CAAC,GAAGC,MAAM;AAExB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAMC,eAAe,GAAGZ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAE;EACvC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACjD,MAAM,CAACc,GAAG,EAAEC,MAAM,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACgB,GAAG,EAAEC,MAAM,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAMkB,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC,CAAE;;EAEhDvB,SAAS,CAAC,MAAM;IACZ,MAAMwB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAIC,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QACrB,MAAMC,IAAI,GAAG,MAAMvB,cAAc,CAACqB,QAAQ,CAAC;QAC3CG,YAAY,CAACD,IAAI,CAAC;MACtB;IACJ,CAAC;IAEDH,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,CAACC,QAAQ,CAAC,CAAC;EAEd,MAAMI,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAInB,OAAO,EAAE;MACT,IAAI;QACA,MAAMoB,cAAc,GAAGC,kBAAkB,CAACrB,OAAO,CAAC;QAClD,MAAMsB,OAAO,GAAG,MAAM7B,KAAK,CAAC;UACxB8B,MAAM,EAAE,KAAK;UACbC,GAAG,EAAE,6DAA6DJ,cAAc,EAAE;UAClFK,OAAO,EAAE;YACLC,aAAa,EAAE,WAAWhB,OAAO;UACrC;QACJ,CAAC,CAAC;QAEF,IAAIY,OAAO,CAACK,IAAI,CAACC,SAAS,CAACZ,MAAM,GAAG,CAAC,EAAE;UACnC,MAAMa,QAAQ,GAAGP,OAAO,CAACK,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;UAC1CrB,MAAM,CAACsB,QAAQ,CAACC,CAAC,CAAC;UAClBrB,MAAM,CAACoB,QAAQ,CAACE,CAAC,CAAC;UAClB1B,WAAW,CAACwB,QAAQ,CAAC;QACzB;MACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACrC;IACJ;EACJ,CAAC;;EAED;EACA1C,SAAS,CAAC,MAAM;IACZ6B,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACnB,OAAO,CAAC,CAAC;EAEbV,SAAS,CAAC,MAAM;IACZ,IAAIc,QAAQ,EAAE;MACV8B,IAAI,CAAC,CAAC;IACV;EACJ,CAAC,EAAE,CAAC9B,QAAQ,CAAC,CAAC,CAAC,CAAE;;EAEjB,MAAM8B,IAAI,GAAGA,CAAA,KAAM;IACf,IAAI/B,eAAe,CAACgC,OAAO,EAAE;MAAG;MAC5B,MAAMC,SAAS,GAAGjC,eAAe,CAACgC,OAAO;MACzC,MAAME,OAAO,GAAG;QACZC,MAAM,EAAE,IAAIzC,KAAK,CAACqC,IAAI,CAACK,MAAM,CAACjC,GAAG,EAAEE,GAAG,CAAC;QACvCgC,KAAK,EAAE;MACX,CAAC;MACD,IAAIC,GAAG,GAAG,IAAI5C,KAAK,CAACqC,IAAI,CAACQ,GAAG,CAACN,SAAS,EAAEC,OAAO,CAAC,CAAC,CAAE;;MAEnD,IAAIM,cAAc,GAAG,IAAI9C,KAAK,CAACqC,IAAI,CAACK,MAAM,CAACjC,GAAG,EAAEE,GAAG,CAAC;;MAEpD;MACA,IAAIoC,MAAM,GAAG,IAAI/C,KAAK,CAACqC,IAAI,CAACW,MAAM,CAAC;QAC/BC,QAAQ,EAAEH,cAAc;QACxBI,SAAS,EAAE;MACf,CAAC,CAAC;;MAEF;MACAH,MAAM,CAACI,MAAM,CAACP,GAAG,CAAC;;MAElB;MACA;AACZ;AACA;MACY;AACZ;AACA;AACA;AACA;;MAEY;AACZ;AACA;;MAGY5C,KAAK,CAACqC,IAAI,CAACe,KAAK,CAACC,WAAW,CAACT,GAAG,EAAE,aAAa,EAAE,YAAW;QACxD;QACA,IAAIH,MAAM,GAAGG,GAAG,CAACU,SAAS,CAAC,CAAC;;QAE5B;QACA,IAAIC,UAAU,GAAG,IAAIvD,KAAK,CAACqC,IAAI,CAACK,MAAM,CAACD,MAAM,CAACe,MAAM,CAAC,CAAC,EAAEf,MAAM,CAACgB,MAAM,CAAC,CAAC,GAAG,CAACb,GAAG,CAACc,SAAS,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAACF,MAAM,CAAC,CAAC,GAAGhB,MAAM,CAACgB,MAAM,CAAC,CAAC,IAAI,GAAG,CAAC;;QAE5I;QACA,IAAGrD,IAAI,EAAC;UACJwC,GAAG,CAACgB,SAAS,CAACL,UAAU,CAAC;UACzBX,GAAG,CAACiB,WAAW,CAAC,KAAK,CAAC;UACtBjB,GAAG,CAACkB,YAAY,CAAC,KAAK,CAAC;QAC3B;MACJ,CAAC,CAAC;IACN;EACJ,CAAC;EAED,oBAAO/D,OAAA;IAAKgE,SAAS,EAAC,UAAU;IAACC,GAAG,EAAE1D;EAAgB;IAAA2D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC,CAAC,CAAE;AACrE,CAAC;AAAC/D,EAAA,CA1GIH,IAAI;AAAAmE,EAAA,GAAJnE,IAAI;AA4GV,eAAeA,IAAI;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}