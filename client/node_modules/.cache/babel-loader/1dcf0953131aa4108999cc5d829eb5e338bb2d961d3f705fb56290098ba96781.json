{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useContext } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchLists } from \"../redux/actions/listActions\";\nimport { AuthContext } from '../context/AuthContext';\nconst {\n  kakao\n} = window;\nconst PlanInfo = ({\n  setPositions,\n  contentId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const allLists = useSelector(state => state.lists.lists);\n  const {\n    isAuthenticated,\n    userInfo\n  } = useContext(AuthContext);\n  const lists = useMemo(() => {\n    //useEffect에 객체 전달로 인한 리랜더링 방지\n    if (isAuthenticated && userInfo) {\n      return allLists.filter(list => list.user_content_id === contentId);\n    }\n    return [];\n  }, [allLists, isAuthenticated, userInfo, contentId]);\n  useEffect(() => {\n    dispatch(fetchLists());\n  }, [dispatch]);\n  return null;\n};\n_s(PlanInfo, \"UGVcHSi+SdkL/dTTaKDAGPd1TLw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = PlanInfo;\nexport default PlanInfo;\nvar _c;\n$RefreshReg$(_c, \"PlanInfo\");","map":{"version":3,"names":["React","useEffect","useMemo","useContext","axios","useDispatch","useSelector","fetchLists","AuthContext","kakao","window","PlanInfo","setPositions","contentId","_s","dispatch","allLists","state","lists","isAuthenticated","userInfo","filter","list","user_content_id","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/Memo-Jung/coursing/client/src/component/plan_info.js"],"sourcesContent":["import React, { useEffect, useMemo, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchLists } from \"../redux/actions/listActions\";\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nconst { kakao } = window;\r\n\r\nconst PlanInfo = ({ setPositions, contentId }) => {\r\n    const dispatch = useDispatch();\r\n    const allLists = useSelector((state) => state.lists.lists);\r\n    const { isAuthenticated, userInfo } = useContext(AuthContext);\r\n\r\n    const lists = useMemo(()=>{     //useEffect에 객체 전달로 인한 리랜더링 방지\r\n        if(isAuthenticated && userInfo){\r\n            return allLists.filter(list => list.user_content_id === contentId);\r\n        }\r\n        return [];\r\n    }, [allLists, isAuthenticated, userInfo, contentId]);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchLists());\r\n    }, [dispatch]);\r\n\r\n    \r\n\r\n    \r\n\r\n    return null;\r\n}\r\n\r\nexport default PlanInfo;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,OAAO,EAAEC,UAAU,QAAQ,OAAO;AAC7D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,MAAM;EAAEC;AAAM,CAAC,GAAGC,MAAM;AAExB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,QAAQ,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACA,KAAK,CAAC;EAC1D,MAAM;IAAEC,eAAe;IAAEC;EAAS,CAAC,GAAGjB,UAAU,CAACK,WAAW,CAAC;EAE7D,MAAMU,KAAK,GAAGhB,OAAO,CAAC,MAAI;IAAM;IAC5B,IAAGiB,eAAe,IAAIC,QAAQ,EAAC;MAC3B,OAAOJ,QAAQ,CAACK,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,eAAe,KAAKV,SAAS,CAAC;IACtE;IACA,OAAO,EAAE;EACb,CAAC,EAAE,CAACG,QAAQ,EAAEG,eAAe,EAAEC,QAAQ,EAAEP,SAAS,CAAC,CAAC;EAEpDZ,SAAS,CAAC,MAAM;IACZc,QAAQ,CAACR,UAAU,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACQ,QAAQ,CAAC,CAAC;EAMd,OAAO,IAAI;AACf,CAAC;AAAAD,EAAA,CArBKH,QAAQ;EAAA,QACON,WAAW,EACXC,WAAW;AAAA;AAAAkB,EAAA,GAF1Bb,QAAQ;AAuBd,eAAeA,QAAQ;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}